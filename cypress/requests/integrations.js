/**-------------------------------------------------------------
 * Description: calls related to Integrations
---------------------------------------------------------------*/
import { _sixtySeconds, _tenSeconds, _twentySeconds, letsWait, getSpecBasedNamePrefix } from "../support/utils"
import { getUrlByName } from "./apiAndNonApiUrlsMapper"
const store = {}

function getScmIntegrationStatus() {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: getUrlByName("AU_058")
     }
}

function createAlert(envID, body) {
     return {
          method: 'POST', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_047")}/${envID}/alert`,
          body: body,
     }
}

function updateAlert(body) {
     return {
          method: 'PUT', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: getUrlByName("AU_101"),
          body: body,
     }
}

function getAlerts() { return { method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') }, url: getUrlByName('AU_101'), body: '' } }

function getAlertsConfig(envID) {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_047")}/${envID}/alert`,
          body: '',
          failOnStatusCode: false
     }
}

function escalateMessage(envID, body) {
     return {
          method: 'POST', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_047")}/${envID}/escalate`,
          body: body,
          failOnStatusCode: false
     }
}

function createAPIAuthToken() {
     return {
          method: 'POST', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: getUrlByName("AU_102"),
          body: {
               appName: `${getSpecBasedNamePrefix() + Date.now()}`,
               description: 'Generated by Build Acceptance Test',
          },
          failOnStatusCode: false
     }
}

function addOnpremiseBOT(body) {
     return {
          method: 'POST', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: getUrlByName("AU_103"),
          body: body
     }
}

function changeOnpremiseBotNameDescription(botID, body) {
     return {
          method: 'PUT', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_103")}/${botID}`,
          body: body
     }
}

function getBOTStatusAllBots() {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `/v1/api/bot/status`,
     }
}

function waitForBotStatus(botID, expectedStatus) {
     for (var i = 0; i < 5; i++) {
          cy.log("Attempt:" + i)
          cy.request(getBOTStatusAllBots()).then(async (response) => {
               let responseArray = await response.body.find(function (x) {
                    return x.botId === botID;})
               if (responseArray.botState == expectedStatus) {
                    cy.log(`BOT: ${botID} status:  ${response.body.botState}`)
                    return
               }
               letsWait(`Waiting for the bot status to be ...${expectedStatus}`, _twentySeconds)
               // waitForBotStatus(botID, expectedStatus)
          });
     }
}


function getBOTIDByBotName(botName) {
     cy.request(getBOTStatusAllBots()).then(response => {
          let bots = response.body
          if (bots.length > 0) {
               bots.forEach(function (bot) {
                    if (bot.name === botName) {
                         return bot.bot_id
                    }
               })
          }
          else {
               cy.log(`Bot ${botName} not found`)
          }
     })
}

function getReposForBot(scmType, botID) {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_105")}/${scmType}/repos?bot=${botID}`,
     }
}

function getAuthStatusFromBotHost() {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `http://${Cypress.env('botHost')}:${Cypress.env('botFEPort')}/v1/auth/status`,
          timeout: _tenSeconds
     }
}

function getHealthStatusFromBotHost() {
     return {
          method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `http://${Cypress.env('botHost')}:${Cypress.env('botFEPort')}/health`,
     }
}

function deleteOnpremiseBOT(botID) {
     return {
          method: 'DELETE', headers: { 'x-cookie': Cypress.env('tcsToken') },
          url: `${getUrlByName("AU_103")}/${botID}`
     }
}

function deleteAlert(alertID) { return { method: 'DELETE', headers: { 'x-cookie': Cypress.env('tcsToken') }, url: `${getUrlByName("AU_101")}/${alertID}`, body: '' } }

function deleteAllAlertConfigurations() {
     cy.request(getAlerts()).then((response) => {
          let alerts = response.body
          alerts.forEach(function (alert) {
               cy.request(deleteAlert(alert.id)).its('status').should('be.equal', 204)
          })
     });
}

function getApiTokens() { return { method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') }, url: getUrlByName("AU_102") } }

function deleteApiToken(token) { return { method: 'DELETE', headers: { 'x-cookie': Cypress.env('tcsToken') }, url: `${getUrlByName("AU_102")}/${token}` } }

//  * UI IS NOT USING THIS AT PRESENT
// function getSCMOrgs(scmType) {
//      return {
//           method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
//           url: `/v1/api/code/${scmType}/orgs`,
//      }
// }
//  * UI IS NOT USING THIS AT PRESENT
// function getReposBySCMOrgID(scmType, orgID) {
//      return {
//           method: 'GET', headers: { 'x-cookie': Cypress.env('tcsToken') },
//           url: `/v1/api/code/${scmType}/org/${orgID}/repos`,
//      }
// }

export {
     getHealthStatusFromBotHost, getAuthStatusFromBotHost, getReposForBot, getBOTIDByBotName,
     changeOnpremiseBotNameDescription, waitForBotStatus, getBOTStatusAllBots,
     deleteOnpremiseBOT, addOnpremiseBOT, createAPIAuthToken,
     escalateMessage, updateAlert, createAlert,
     getAlerts, deleteAlert, getAlertsConfig, getScmIntegrationStatus, getApiTokens, deleteApiToken
}
